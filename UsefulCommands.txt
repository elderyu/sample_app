rake db:test:prepare
Digest::MD5::hexdigest(email.downcase) - graatar's url encoded by MD5 hash algorithm
user.errors.full_messages
web: bundle exec puma -C config/puma.rb #puma in prcfile root directory
#Rails::logger.debug "User password_digest: #{@user.password_digest}"
#Rails::logger.debug login_url      http://www.example.com/login
#Rails::logger.debug login_path     /login
authenticate(params[:session][:password])
User.find_by(email: params[:session][:email].downcase)
flash.now[:danger] #on rendered pages, :success
session[:user_id] = user.id #expires when browser closed
user.find przy błędzie zwraca wyjątek
user.find_by przy błędzie zwraca nila
==============================================(Because helper methods aren’t available in tests=================================================
instance variables cannot be passed as arguments to methods
method implicitly returns last result of operation
deleting instance variable deletes also local, but not the opposite
cookies.signed means the cookies cannot be changed in between sessions (closing and opening browser)
User.create! - raises exception instead of returning false(avoiding silent errors) for normal User.create
      <%= render user %> - in html file looks for _user partial

      <ul class="users">
        <%= render @users %>    - Here Rails infers that @users is a list of User objects; moreover, when called with a collection of users, Rails automatically iterates through them and renders each one with the _user.html.erb partial (inferring the name of the partial from the name of the class).
      </ul>

toggle! - flips boolean to opposite state
CGI.escape(user.email) - decodes ASCII to compare emails in mailers
user.send("#{attribute}_digest") - send method to object, we can use interpolation to alter the argument
ActionMailer::Base.deliveries.clear - this array is global, so we have to reset it in setup method in tests
user = assigns :user - lets access instance variables i the corresponding action inside test environment, currently deprecated
=======================================================================================
Note that Listing 12.14 uses the form tag helper

hidden_field_tag :email, @user.email
instead of

f.hidden_field :email, @user.email
because the reset link puts the email in params[:email], whereas the latter would put it in params[:user][:email].
======================================================================================
assert_select "input[name=email][type=hidden][value=?]"
@micropost = @user.micropost.build(content: "Lorem ipsum") - because micropost is associoted with user and after initalization user_id is automatically associated // instead of Micropost.new(content: "dsadas", user_id: @user.id)
(As with new, build returns an object in memory but doesn’t modify the database.)
user.microposts.find_by(id: 1)	Finds the micropost with id 1 and user_id equal to user.id
order('created_at DESC') - one level deeper, creating raw sql code, now we can do this: order(created_at: :desc)
  has_many :microposts, dependent: :destroy

  As with paginate, we can use the count method through the association. In particular, count does not pull all the microposts out of the database and then call length on the resulting array, as this would become inefficient as the number of microposts grew. Instead, it performs the calculation directly in the database, asking the database to count the microposts with the given user_id (an operation for which all databases are highly optimized). (In the unlikely event that finding the count is still a bottleneck in your application, you can make it even faster using a counter cache.)

  time_ago_in_words

User.order(:created_at).take(6)

response.body contains the full HTML source of the page (and not just the page’s body).

assert_select 'h1>img.gravatar'

request.original_url - is just the previous URL

validates :follower_id, presence: true
validates :followed_id, presence: true - Rails 5 automatically provides these tests

has_many :following, throught: :ative_relationships, source: :followed - following - nazwa używana przez nas, source followed - źródło w tabeli, acive relationships - tabela

resources :users do
   member do
     get :following, :followers
   end
 end
 resources :account_activations, only: [:edit]
 resources :password_resets,     only: [:new, :create, :edit, :update]
 resources :microposts,          only: [:create, :destroy]
end
You might suspect that the URLs for following and followers will look like /users/1/following and /users/1/followers, and that is exactly what the code in Listing 14.15 arranges. Since both pages will be showing data, the proper HTTP verb is a GET request, so we use the get method to arrange for the URLs to respond appropriately. Meanwhile, the member method arranges for the routes to respond to URLs containing the user id. The other possibility, collection, works without the id, so that
resources :users do
 collection do
   get :tigers
 end
end
would respond to the URL /users/tigers (presumably to display all the tigers in our application).
